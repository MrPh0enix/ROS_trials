#!/usr/bin/env python3

import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry

class TurtlebotMover():

    def __init__(self):
        self.vel = Twist()
        self.stage1 = False
        self.stage2 = False
        self.stage3 = False
        self.stage4 = False

    def callback(self, data):
        # print(data.pose.pose.position.z) 
        print(data) 
        if self.stage1==False and (data.pose.pose.position.x >= 1):
            self.vel.linear.x = 0
            self.vel.angular.z = 0.2
            self.stage1 = True
        elif self.stage2==False and (data.pose.pose.position.z >= ):
            self.vel.angular.z = 0
            self.vel.linear.x = 0.1
            self.stage2==True
        elif self.stage3==False and (data.pose.pose.position.y >= 1):
            self.vel.linear.x = 0
            self.vel.linear.x = 0.1
            self.stage2==True

        



    def mover(self):
        pub = rospy.Publisher("cmd_vel", Twist, queue_size=10)
        sub = rospy.Subscriber("odom", Odometry, self.callback)
        rospy.init_node('mover', anonymous=True)
        rate = rospy.Rate(100)

        self.vel.linear.x = 0.1
        # self.vel.angular.z = 0.1

        while not rospy.is_shutdown():
            pub.publish(self.vel)
            rate.sleep()


if __name__ == "__main__":
    mvr = TurtlebotMover()
    mvr.mover()
